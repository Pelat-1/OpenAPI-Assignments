openapi: 3.0.2
components:
  parameters:
    customerId:
      name: customerId
      in: path
      description: Customer ID
      required: true
      schema:
        type: string
        format: uuid
    pageNumber:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
        example: 2
    pageSize:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 25
        example: 25
  schemas:
    address:
      type: object
      title: Address
      description: Address Class
      properties:
        country:
          type: string
          example: Italy
        city:
          type: string
          example: Rome
        street:
          type: string
          example: via Vittorio Emanuele
        number:
          type: string
          example: 23/B
        zipCode:
          type: string
          minLength: 5
          maxLength: 5
          example: 00100
      required: [ country, city, street, number, zipCode ]
    beer:
      type: object
      title: Beer
      description: Beer Class
      properties:
        id:
          type: string
          format: uuid
        style:
          type: string
          minLength: 3
          maxLength: 8
          enum: [ 'ALE', 'PALE_ALE', 'IPA', 'WHEAT', 'LAGER' ]
          example: 'LAGER'
        price:
          type: number
          format: float
          minimum: 0.5
          example: 5.50
        quantity:
          type: integer
          format: int32
          minimum: 0
          example: 150
        brewery:
          $ref: '#/components/schemas/brewery'
      required: [ id, style, price, quantity ]
    beerList:
      type: array
      title: BeerList
      description: Beer array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/beer'
    beerPagedList:
      type: object
      title: BeerPagedList
      description: Beer Paged List
      allOf:
        - $ref: '#/components/schemas/pageable'
      properties:
        content:
          $ref: '#/components/schemas/beerList'
    brewery:
      type: object
      title: Brewery
      description: Brewery Class
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 3
          example: 'Brewery inc.'
        location:
          $ref: '#/components/schemas/breweryLocation'
      required: [ id, name ]
    breweryLocation:
      type: object
      title: BreweryLocation
      description: Location Class
      properties:
        id:
          type: string
          format: uuid
        city:
          type: string
          example: Berlin
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      required: [ id, city ]
    customer:
      type: object
      title: Customer
      description: Customer Class
      properties:
        id:
          type: string
          format: uuid
        firstname:
          type: string
          minLength: 2
          example: James
        lastname:
          type: string
          minLength: 2
          example: Brown
        address:
          $ref: '#/components/schemas/address'
      required: [ firstname, lastname, address ]
    customerList:
      type: array
      title: CustomerList
      description: Customer array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/customer'
    customerPagedList:
      type: object
      title: CustomerPagedList
      description: Customer Paged List
      allOf:
        - $ref: '#/components/schemas/pageable'
      properties:
        content:
          $ref: '#/components/schemas/customerList'
      required: [ content ]
    page:
      type: object
      title: Page
      description: Pageable Abstract Class
      properties:
        offset:
          type: integer
          format: int32
          minimum: 0
          example: 25
        pageNumber:
          type: integer
          format: int32
          minimum: 1
          example: 2
        pageSize:
          type: integer
          # value = content.size()
          format: int32
          minimum: 1
          example: 25
      required: [ offset, pageNumber ]
    pageable:
      type: object
      title: Pageable
      description: Page Abstract Class
      properties:
        page:
          $ref: '#/components/schemas/page'
        sorted:
          type: boolean
          default: true
          example: true
        totalPages:
          type: integer
          format: int32
          minimum: 1
          example: 4
        totalElements:
          type: integer
          format: int32
          minimum: 0
          example: 100
      required: [ page, totalPages, totalElements ]