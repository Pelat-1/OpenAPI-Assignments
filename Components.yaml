openapi: 3.0.2
components:
  parameters:
    beerId:
      name: beerId
      in: path
      description: Beer ID
      required: true
      schema:
        type: string
        format: uuid
        example: 63b7baba-90e9-4371-ad6f-11670f625a9e
    customerId:
      name: customerId
      in: path
      description: Customer ID
      required: true
      schema:
        type: string
        format: uuid
        example: f59baba5-3ba1-47e8-b67e-3b58503e2913
    pageNumber:
      name: pageNumber
      in: query
      description: Page Number
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
        example: 2
    pageSize:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 25
        example: 25
  headers:
    beerLocation:
      description: Location of the created beer
      schema:
        type: string
        format: uri
        example: https://dev.example.com/v1/beers/63b7baba-90e9-4371-ad6f-11670f625a9e
    customerLocation:
      description: Location of the created customer
      schema:
        type: string
        format: uri
        example: https://dev.example.com/v1/customers/f59baba5-3ba1-47e8-b67e-3b58503e2913
  requestBodies:
    addBeerInOrder:
      required: false
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/beerOrderLine'
    beerOrderUpdated:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/beerOrderCallback'
    newBeer:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/beer'
    newCustomer:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/customer'
  responses:
    beerConflict409:
      description: Beer already exists
    beerNotFound:
      description: Beer not found
    beerOrderCallback:
      description: Ok
    createBeer201:
      description: Beer created
      headers:
        location:
          $ref: '#/components/headers/beerLocation'
    createCustomer201:
      description: Customer created
      headers:
        location:
          $ref: '#/components/headers/customerLocation'
    customerConflict409:
      description: Customer already exists
    customerNotFound404:
      description: Beer not found
    deleteBeer200:
      description: Delete Beer from beerId
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/beer'
    deleteCustomer200:
      description: Delete Customer from customerId
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/customer'
    emptyList404:
      description: List empty
    getBeer200:
      description: Get Beer from beerId
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/beer'
    getBeerList200:
      description: Get Beer list
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/beerPagedList'
    getCustomer200:
      description: Get Customer from customerId
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/customer'
    getCustomerList200:
      description: Get Customer list
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/customerPagedList'
    idMissingWrongFormat400:
      description: ID missing or wrong format
    orderCreated201:
      description: Order created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/beerOrder'
    orderNotFound404:
      description: Order not found
    orderUpdated201:
      description: Order updated
    updateBeer204:
      description: Beer updated
    updateCustomer204:
      description: Beer updated
    userNotAllowed401:
      description: User is not allowed
  schemas:
    address:
      type: object
      title: Address
      description: Address Class
      properties:
        country:
          type: string
          example: Italy
        city:
          type: string
          example: Rome
        street:
          type: string
          example: via Vittorio Emanuele
        number:
          type: string
          example: 23/B
        zipCode:
          type: string
          minLength: 5
          maxLength: 5
          example: '00100'
      required: [ country, city, street, number, zipCode ]
    beer:
      type: object
      title: Beer
      description: Beer Class
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 63b7baba-90e9-4371-ad6f-11670f625a9e
        style:
          type: string
          minLength: 3
          maxLength: 8
          enum: [ 'ALE', 'PALE_ALE', 'IPA', 'WHEAT', 'LAGER' ]
          example: 'LAGER'
        price:
          type: number
          format: float
          minimum: 0.5
          example: 5.50
        quantity:
          type: integer
          format: int32
          minimum: 0
          example: 150
        brewery:
          $ref: '#/components/schemas/brewery'
      required: [ id, style, price, quantity ]
    beerList:
      type: array
      title: BeerList
      description: Beer array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/beer'
    beerOrder:
      type: object
      title: BeerOrder
      description: Beer order
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          nullable: true
          example: a538926a-2494-11ed-861d-0242ac120002
        customerId:
          type: string
          format: uuid
          readOnly: true
          example: f59baba5-3ba1-47e8-b67e-3b58503e2913
        beerOrderLine:
          $ref: '#/components/schemas/beerOrderLineArray'
        orderStatusCallbackUrl:
          type: string
          format: uri
      required: [ customerId ]
    beerOrderCallback:
      type: object
      title: BeerOrder
      description: Beer order
      properties:
        id:
          type: string
          format: uuid
          nullable: true
          example: a538926a-2494-11ed-861d-0242ac120002
        customerId:
          type: string
          format: uuid
          example: f59baba5-3ba1-47e8-b67e-3b58503e2913
        beerOrderLine:
          $ref: '#/components/schemas/beerOrderLineArray'
        orderStatusCallbackUrl:
          type: string
          format: uri
      required: [ customerId ]
    beerOrderLine:
      type: object
      properties:
        beerId:
          type: string
          format: uuid
          example: 63b7baba-90e9-4371-ad6f-11670f625a9e
        quantity:
          maximum: 999
          minimum: 1
          type: integer
          example: 3
      required: [ beerId, quantity ]
    beerOrderLineArray:
      type: array
      items:
        $ref: '#/components/schemas/beerOrderLine'
    beerPagedList:
      type: object
      title: BeerPagedList
      description: Beer Paged List
      allOf:
        - $ref: '#/components/schemas/pageable'
      properties:
        content:
          $ref: '#/components/schemas/beerList'
    brewery:
      type: object
      title: Brewery
      description: Brewery Class
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: 02990636-6466-4354-93af-38981f4e1df6
        name:
          type: string
          minLength: 3
          example: 'Brewery inc.'
        location:
          $ref: '#/components/schemas/breweryLocation'
      required: [ id, name ]
    breweryLocation:
      type: object
      title: BreweryLocation
      description: Location Class
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: ef5403c5-55b7-425a-b3ea-c6f58adb3b1a
        city:
          type: string
          example: Berlin
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
      required: [ id, city ]
    customer:
      type: object
      title: Customer
      description: Customer Class
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: f59baba5-3ba1-47e8-b67e-3b58503e2913
        firstname:
          type: string
          minLength: 2
          example: James
        lastname:
          type: string
          minLength: 2
          example: Brown
        address:
          $ref: '#/components/schemas/address'
      required: [ firstname, lastname, address ]
    customerList:
      type: array
      title: CustomerList
      description: Customer array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/customer'
    customerPagedList:
      type: object
      title: CustomerPagedList
      description: Customer Paged List
      allOf:
        - $ref: '#/components/schemas/pageable'
      properties:
        content:
          $ref: '#/components/schemas/customerList'
      required: [ content ]
    page:
      type: object
      title: Page
      description: Pageable Abstract Class
      properties:
        offset:
          type: integer
          format: int32
          minimum: 0
          example: 25
        pageNumber:
          type: integer
          format: int32
          minimum: 1
          example: 2
        pageSize:
          type: integer
          # value = content.size()
          format: int32
          minimum: 1
          example: 25
      required: [ offset, pageNumber ]
    pageable:
      type: object
      title: Pageable
      description: Page Abstract Class
      properties:
        page:
          $ref: '#/components/schemas/page'
        sorted:
          type: boolean
          default: true
          example: true
        totalPages:
          type: integer
          format: int32
          minimum: 1
          example: 4
        totalElements:
          type: integer
          format: int32
          minimum: 0
          example: 100
      required: [ page, totalPages, totalElements ]
